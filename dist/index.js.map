{"version":3,"sources":["../src/index.js"],"names":["log","FedExAPI","environment","token","request","axios","create","baseURL","timeout","headers","Authorization","err","response","data","status","errors","Error","map","error","code","parameter","message","reduce","a","b","params","post","then","handleError","id","get","patch"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport debug from 'debug';\n\nconst log = debug('roadie');\n\nexport default class FedExAPI {\n  constructor({ environment, token }) {\n    this.request = axios.create({\n      baseURL: environment === 'production' ? 'https://connect.roadie.com' : 'https://connect-sandbox.roadie.com', // TODO: ensure production url is correct before go live\n      timeout: 3000,\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  async handleError(err) {\n    if (err.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      log('Error: response.data: %o', err.response.data);\n      log('Error: response.status: %o', err.response.status);\n      log('Error: response.headers: %o', err.response.headers);\n      if (err.response.data && err.response.data.errors) {\n        throw new Error(\n          err.response.data.errors\n            .map(error => {\n              return `code: ${error.code} parameter: ${error.parameter} message: ${error.message}`;\n            })\n            .reduce((a, b) => {\n              return `${a}\\n${b}`;\n            }, 'Roadie Error: '),\n        );\n      }\n    } else if (err.request) {\n      // The request was made but no response was received\n      // `err.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      log('Error: err.request: %o', err.request);\n    } else {\n      // Something happened in setting up the request that triggered an err\n      log('Error: %s', err.message);\n    }\n  }\n\n  /**\n   *\n   * from https://docs.roadie.com/#create-a-shipment\n   *\n   * @param {Object} params\n      reference_id (required)\tstring\tThe user supplied ID for the shipment. Max length 100 characters.\n      items (required)\tarray\tAn array of one or more Item.\n      pickup_location (required)\tLocation\tA complete Location object.\n      delivery_location (required)\tLocation\tA complete Location object.\n      pickup_after (required)\ttimestamp\tThe time when the shipment is ready for pickup.\n      deliver_between (required)\tTimeWindow\tThe window within which the shipment must be completed.\n      options (required)\tDeliveryOptions\tAny delivery options for the shipment.\n   * @param {function} cb\n   */\n  createShipment(params) {\n    return this.request\n      .post('/v1/shipments', params)\n      .then(response => response.data)\n      .catch(async err => this.handleError(err));\n  }\n\n  /**\n   *\n   * @param {Number} id (required)\tstring\tid of previously created shipment\n   */\n  deleteShipment(id) {\n    return this.request\n      .delete(`/v1/shipments/${id}`)\n      .then(response => response.data)\n      .catch(async err => this.handleError(err));\n  }\n\n  /**\n   *\n   * from https://docs.roadie.com/#create-an-estimate\n   *\n   * @param {Object} params\n      items (required)\tarray\tAn array of one or more Item.\n      pickup_location (required)\tLocation\tA Location object.\n      delivery_location (required)\tLocation\tA Location object.\n      pickup_after (required)\ttimestamp\tThe time when the shipment is ready for pickup.\n      deliver_between (required)\tTimeWindow\tThe window within which the shipment must be completed.\n   * @param {function} cb\n   */\n  estimate(params) {\n    return this.request\n      .post('/v1/estimates', params)\n      .then(response => response.data)\n      .catch(async err => this.handleError(err));\n  }\n\n  /**\n   *\n   * @param {Number} id (required)\tstring\tid of previously created shipment\n   */\n  retrieveShipment(id) {\n    return this.request\n      .get(`/v1/shipments/${id}`)\n      .then(response => response.data)\n      .catch(async err => this.handleError(err));\n  }\n\n  /**\n   *\n   * @param {Number} id (required)\tstring\tid of previously created shipment\n   * @param {Object} params\n      reference_id\tstring\tThe user supplied ID for the shipment.\n      state\tstring\tThe current state of the shipment. See ShipmentState for all possible values.\n      items\tarray\tAn array of one or more Item.\n      pickup_location\tLocation\tThe address and contact info where the driver will pick up the shipment.\n      delivery_location\tLocation\tThe address and contact info where the driver will deliver the shipment.\n      pickup_after\ttimestamp\tThe time, in RFC 3339 format, after which the shipment is ready for pickup.\n      deliver_between\tTimeWindow\tThe window within which the shipment must be completed.\n      options\tDeliveryOptions\tAny delivery options for the shipment.\n      tracking_number\tstring\tA unique number used to track the shipment.\n      driver\tDriver\tThe information about the assigned driver.\n      created_at\ttimestamp\tThe time when the shipment was created in RFC 3339 format.\n      updated_at\ttimestamp\tThe time when the shipment was last updated in RFC 3339 format.\n   */\n  updateShipment(id, params) {\n    return this.request\n      .patch(`/v1/shipments/${id}`, params)\n      .then(response => response.data)\n      .catch(async err => this.handleError(err));\n  }\n}\n"],"file":"index.js"}